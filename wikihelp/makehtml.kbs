#makehtml.kbs

# make the HTML offline help for BASIC256.

# HOWTO:
# 1) download the data/media and data/pages folders from the docuwiki web site were the
# documentation is maintained.  Place them in a folder named wikihelp in the trunk
# 2) in wikihelp folder delete all files in the help subfolder
# 3) using basic256 1.99.99.9 or better run this program to convert the docuwiki files
# into pure html5
# 4) then execute the created batch/shell file to create the lib folder with only the
# required graphic images.

# Modification History
# date		programmer	description
# 20160102	j.m.reneau	original coding
# 20160105	j.m.reneau	fixed iages and other things



function quote(s)
   # return quotes around a string
   if not instr(s,'"') then return '"' + s + '"'
   if not instr(s,"'") then return "'" + s + "'"
   return "'" + replace(s,"'",'"') + "'"
end function

function pad(n,l)
   # pad n on left to length
   while length(n)<l
      n = "0"+n
   end while
   return n
end function


function processline(lang, l)
   # do the changes for a single line - whenever we read in a line
   # process the heading, font, character, images, and links on that line
   
   ## headings
   l = replacex(l,"======(.*)======", "<h1>\1</h1>")
   l = replacex(l,"=====(.*)=====", "<h1>\1</h1>")
   l = replacex(l,"====(.*)====", "<h2>\1</h2>")
   l = replacex(l,"===(.*)===", "<h3>\1</h3>")
   l = replacex(l,"==(.*)==", "<h4>\1</h4>")
   
   # font effects
   l = replacex(l,"\*\*(.*)\*\*", "<b>\1</b>")
   l = replacex(l,"//(.*)//", "<i>\1</i>")
   
   # characters
   l = replace(l,"%%|%%", "&#124;")
   l = replace(l,"%%^%%", "&#94;")
   l = replace(l,"~~SP~~", "&nbsp;")
   l = replace(l,"(tab)", "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;")
   l = replacex(l,"<hi (.*)>(.*)</hi>", "<span style='background-color:\1;'>\2</span>")
   
   
   
   # images
   # form {{:filename?scale|text}}
   while instrx(l,"\{\{ *:.*\|.*\}\}")
      parts = explodex(l, "\{\{ *:(.*)\|(.*)\}\}")
      scale = replacex(parts[1],"^.*\??([0-9]*)$","\1")
      parts[1] = replacex(parts[1],"\?[0-9]*$","")
      if ostype() = 0 then
         f = replace(parts[1],':','\')
      else
         f = replace(parts[1],':','/')
      endif
      if instr(parts[1],':') then
         t = lower(replace(parts[1],':','_'))
      else
         t = "_" + parts[1]
      endif
      if parts[2] = "" then parts[2] = t
      img = "<img src=" + quote("lib/"+t) + " alt=" + quote(parts[2])
      if scale <> "" then
         img += " style='width:"+ scale + "px'"
      end if
      l = replace(l ,parts[0], img + ">")
      if ostype() = 0 then
         writeline 3, "copy media\" + f + " help\lib\" + t
      else
         writeline 3, "cp media/" + f + " help/lib/" + t
      endif
   end while
   
   #links
   # form [[name|text]] or [[lang:name|text]]
   while instrx(l,"\[\[.*\|.*\]\]")
      parts = explodex(l, "\[\[(.*)\|(.*)\]\]")
      if typeof(parts[2]) = 0 then parts[2] = parts[1]
      if instr(parts[1],':') then
         l = replace(l, parts[0], "<a href=" + quote(lower( replace(parts[1],':','_')) + ".html") +">" + parts[2] + "</a>")
      else
         l = replace(l, parts[0], "<a href=" + quote(lang + "_" + lower( parts[1]) + ".html") +">" + parts[2] + "</a>")
      endif
   end while
   # form [[name]] or [[lang:name]]
   while instrx(l,"\[\[.*\]\]")
      parts = explodex(l, "\[\[(.*)\]\]")
      if instr(parts[1],':') then
         l = replace(l, parts[0], "<a href=" + quote(lower( replace(parts[1],':','_')) + ".html") +">" + parts[1] + "</a>")
      else
         l = replace(l, parts[0], "<a href=" + quote(lang + "_" + lower( parts[1]) + ".html") +">" + parts[1] + "</a>")
      endif
   end while
   return l
   
end function

subroutine processfile(lang, filename)
   ## this subroutine reads in a file and writes out the
   ## html file to go with it  (include .txt to end of file name)
   name = replace(filename,".txt","")
   
   open 1, "pages/"+lang+"/"+name+".txt"
   page = ""
   listsig = ""	## signature of the start of a list line
   intable = false	## are we doing a table
   while not eof(1)
      l = readline(1)

      # if name is start and we are at sample programs end reading the file
      if lang = "" and name = "start" and instr(l,"Sample Programs") then exit while
      
      l =  processline(lang, l)
      
      #include list of links from start page
      # the include plugin in wikihelp used in the format
      # {{page>XX:start#HEADING&noheader}}
      if instrx(l,"\{\{page>.*:start#.*&noheader\}\}") then
         parts = explodex(l, "\{\{page>(.*):start#(.*)&noheader\}\}")
         l = ""
         open 2,  "pages/"+parts[1]+"/start.txt"
         # find line with parts[2]
         while not eof(2) and not instrx(readline(2),"=+ *" + parts[2])
         end while
         # read until we get a line with a starting =
         while not eof(2)
            l2 = readline(2)
            if instrx(l2,"^ *=") then exitwhile
            l += processline(lang,l2)
         end while
         close(2)
      endif
      
      # list item (starts with a *) and may have a nested sub list
      if instrx(l, "^ *\*.*$") then
         parts = explodex(l, "^( *\*)(.*)$")
         if length(parts[1]) > length(listsig) then
            # new list
            l = "<ul><li>"+ parts[2]
            listsig = parts[1]
         else
            if length(parts[1]) < length(listsig) then
               # end nested list
               l = "</li></ul></li><li>"+ parts[2]
               listsig = parts[1]
            else
               l = "</li><li>"+ parts[2]
            endif
         endif
      else
         if length(listsig) > 0 then
            l = "</li></ul>" + l
            listsig = ""
         endif
      endif
      
      # doing a table
      if instrx(l,"^ *(\||\^)") then
         l = replacex(l, "^ *\|", "<tr><td>")
         l = replacex(l, "^ *\^", "<tr><th>")
         l = replacex(l, "\| *\n*$", "</td></tr>")
         l = replacex(l, "\^ \n**$", "</th></tr>")
         l = replacex(l, "\|", "</td><td>")
         l = replacex(l, "\^", "</th><th>")
         if not intable then
            l = "<table border='1'>" + l
            intable = true
         endif
      else
         if intable then
            l = "</table>" + l
            intable = false
         endif
      endif
      
      page += l
   end while
   close(1)
   
   # have we closed tabes and lists??
   if length(listsig) > 0 then
      l = "</li></ul>" + l
      listsig = ""
   endif
   if intable then
      l = "</table>" + l
      intable = false
   endif
   
   
   ## now that we have read in the lines and concatenated them to
   ## page lets do a few global things
   
   page = replacex(page,"<code>(.*)</code>", "<pre>\1</pre>" )
   
   # line control
   page = replacex(page,"\\\\", "<br>")
   page = replacex(page,"\n\n","<br>")
   
   # finish the HTML
   # get the title in the first h1
   parts = explodex(page,"<h1>(.*)</h1>")
   html = "<!DOCTYPE html>" + chr(13)
   html += "<html>" + chr(13)
   html += "<head>" + chr(13)
   html += '<meta charset="UTF-8">' + chr(13)
   html += "<title>"+parts[1]+"</title>" + chr(13)
   html += "<style>"
   html += "header {background-color:#e0e0ff; border-bottom: 2px solid blue; }"
   html += "header nav {float: right; font-size: 120%; }"
   html += "footer {background-color:#e0e0ff; border-top: 2px solid blue; }"
   html += "img {border: 2px solid black; padding: 1px; }"
   html += "pre {border: 2px solid black; padding: 1px; background-color: #e0e0e0;}"
   html += "</style>"
   html += "</head><body>" + chr(13)
   html += "<header>"
   if lang <> "" then
      html += "<nav><a href="+ quote(lang+"_start.html") + ">Start</a></nav>"
   endif
   html += "<h1>Basic-256 Documentation</h1>"
   html += "</header>" + chr(13)
   html += page
   if intable then html+= "</table>"
   if listsig <> "" then html+= "</li></ul>"
   html +=  chr(13) + chr(10) + "<footer>" + chr(13)
   html += "<p><small>Except where otherwise noted, content on documentation is licensed under the following license: CC Attribution-Share Alike 3.0 Unported.  For on-line Documentation see <a href='http://doc.basic256.org'>http://doc.basic256.org</a>.</small></p>" + chr(13)
   html += "<p><small>Generated on "+ pad(year,4) + '-' + pad(month+1,2) + "-" + pad(day,2) +".</small></p>" + chr(13)
   html += "</footer></body></html>"
   
   if lang <> "" then
      outfilename = "help/"+lang+"_"+name+".html"
   else
      outfilename = "help/"+name+".html"
   endif
   if exists(outfilename) then kill outfilename
   open 1, outfilename
   write 1, html
   close 1
   print "Written "+ outfilename
end subroutine

##### PROGRAM STARTS HERE #####

if version < 1999909 then
   print "This program requires 1.99.99.9 or better to run successfully."
   end
endif

regexminimal true

## setup the bat or sh file to copy the media files
## into the help/lib folder
if ostype() = 0 then
   copybat = "copy_images.bat"
else
   copybat = "copy_images.sh"
endif
if exists(copybat) then kill(copybat)
open 3, copybat
if ostype() = 0 then
   writeline 3, "mkdir help\lib"
   writeline 3, "del help\lib\*.*"
else
   writeline 3, "mkdir help/lib"
   writeline 3, "rm help/lib/*"
endif

## get the start page
call processfile("", "start.txt")

## Loop through all of the language folders (startting with the root)
langs = {"de", "el", "en", "es", "fr", "jp", "nl", "pt", "ro", "ru"}
for tlangs = 0 to langs[?]-1
   lang = langs[tlangs]
   
   filename = dir("pages/"+lang)
   while filename <> ""
      if instrx(filename, ".txt$") then
         
         call processfile(lang, filename)
      endif
      
      filename = dir()
      
   end while
next tlangs

close 3
print
print "finished.  Now execute bat file "+copybat+" to move images."

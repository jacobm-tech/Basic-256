#makehtml.kbs

# make the HTML offline help for BASIC256.

# HOWTO:
# 1) download the data/media and data/pages folders from the docuwiki web site were the
# documentation is maintained.  Place them in a folder named wikihelp in the trunk
# 2) in wikihelp folder delete all files in the help subfolder
# 3) using basic256 1.99.99.9 or better run this program to convert the docuwiki files
# into pure html5

# Modification History
# date		programmer	description
# 20160102	j.m.reneau	original coding


function quote(s)
   if not instr(s,'"') then return '"' + s + '"'
   if not instr(s,"'") then return "'" + s + "'"
   return "'" + replace(s,"'",'"') + "'"
end function

function pad(n,l)
   # pad n on left to length
   while length(n)<l
      n = "0"+n
   end while
   return n
end function

subroutine copyfile(f,t)
   openb 3,f
   if exists(t) then kill t
   openb 4,t
   while not eof(3)
      writebyte 4, readbyte(3)
   end while
   close 3
   close 4
   print f + " -> " + t
end subroutine

function processline(lang, l)
   # do the changes for a single line
   ## headings
   l = replacex(l,"=====(.*)=====", "<h1>\1</h1>")
   l = replacex(l,"====(.*)====", "<h2>\1</h2>")
   l = replacex(l,"===(.*)===", "<h3>\1</h3>")
   l = replacex(l,"==(.*)==", "<h4>\1</h4>")
   
   # font effects
   l = replacex(l,"\*\*(.*)\*\*", "<b>\1</b>")
   l = replacex(l,"//(.*)//", "<i>\1</i>")
   
   # characters
   l = replacex(l,"~~SP~~", "&nbsp;")
   l = replacex(l,"(tab)", "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;")
   l = replacex(l,"<hi (.*)>(.*)</hi>", "<span style='background-color:\1;'>\2</span>")
   
   
   
   # images
   # form {{:filename|text}}
   while instrx(l,"\{\{:.*\|.*\}\}")
      parts = explodex(l, "\{\{:(.*)\|(.*)\}\}")
      l = replace(l ,parts[0], "<img src=" + quote(lower(parts[1])) + " alt=" + quote(parts[2]) + ">")
      call copyfile("media\" + parts[1], "html\" + lower(parts[1]))
   end while
   
   #links
   # form [[name|text]] or [[lang:name|text]]
   while instrx(l,"\[\[.*\|.*\]\]")
      parts = explodex(l, "\[\[(.*)\|(.*)\]\]")
      if typeof(parts[2]) = 0 then parts[2] = parts[1]
      if instr(parts[1],':') then
         l = replace(l, parts[0], "<a href=" + quote(lower( replace(parts[1],':','_')) + ".html") +">" + parts[2] + "</a>")
      else
         l = replace(l, parts[0], "<a href=" + quote(lang + "_" + lower( parts[1]) + ".html") +">" + parts[2] + "</a>")
      endif
   end while
   return l
   
end function

regexminimal true

langs = {"", "de", "el", "en", "es", "fr", "jp", "nl", "pt", "ro", "ru"}
for tlangs = 0 to langs[?]-1
   lang = langs[tlangs]
   
   filename = dir("pages/"+lang)
   while filename <> ""
      if instrx(filename, ".txt$") then
         name = replace(filename,".txt","")
         
         open 1, "pages/"+lang+"/"+name+".txt"
         page = ""
         listsig = ""	## signature of the start of a list line
         intable = false	## are we doing a table
         while not eof(1)
            l = processline(lang, readline(1))
            
            
            #include list of links from start page
            if instrx(l,"\{\{page>.*:start#.*&noheader\}\}") then
               parts = explodex(l, "\{\{page>(.*):start#(.*)&noheader\}\}")
               l = ""
               open 2,  "pages/"+parts[1]+"/start.txt"
               # find line with parts[2]
               while not eof(2) and not instrx(readline(2),"=+ *" + parts[2])
               end while
               # read until we get a line with a starting =
               while not eof(2)
                  l2 = readline(2)
                  if instrx(l2,"^ *=") then exitwhile
                  l += processline(lang,l2)
               end while
               close(2)
            endif
            
            # list item
            if instrx(l, "^ *\*.*$") then
               parts = explodex(l, "^( *\*)(.*)$")
               if length(parts[1]) > length(listsig) then
                  # new list
                  l = "<ul><li>"+ parts[2]
                  listsig = parts[1]
               else
                  if length(parts[1]) < length(listsig) then
                     # end nested list
                     l = "</li></ul></li><li>"+ parts[2]
                     listsig = parts[1]
                  else
                     l = "</li><li>"+ parts[2]
                  endif
               endif
            else
               if length(listsig) > 0 then
                  l = "</li></ul>" + l
                  listsig = ""
               endif
            endif
            
            # doing a table
            if instrx(l,"^ *(\||\^)") then
               l = replacex(l, "^ *\|", "<tr><td>")
               l = replacex(l, "^ *\^", "<tr><th>")
               l = replacex(l, "\| *\n*$", "</td></tr>")
               l = replacex(l, "\^ \n**$", "</th></tr>")
               l = replacex(l, "\|", "</td><td>")
               l = replacex(l, "\^", "</th><th>")
               if not intable then
                  l = "<table border='1'>" + l
                  intable = true
               endif
            else
               if intable then
                  l = "</table>" + l
                  intable = false
               endif
            endif
            
            
            page += l
         end while
         close(1)
         
         ## now that we have read in the lines and concatenated then to
         ## page lets do a few global things
         
         page = replacex(page,"<code>(.*)</code>", "<pre>\1</pre>" )
         
         # line control
         page = replacex(page,"\\\\", "<br>")
         page = replacex(page,"\n\n","<br>")
         
         
         # finish the HTML
         # get the title in the first h1
         parts = explodex(page,"<h1>(.*)</h1>")
         html = "<!DOCTYPE html>" + chr(13)
         html += "<html>" + chr(13)
         html += "<head>" + chr(13)
         html += '<meta charset="UTF-8">' + chr(13)
         html += "<title>"+parts[1]+"</title>" + chr(13)
         html += "<style>"
         html += "header {background-color:#e0e0ff; border-bottom: 2px solid blue; }"
         html += "footer {background-color:#e0e0ff; border-top: 2px solid blue; }"
         html += "img {border: 2px solid black; padding: 1px; }"
         html += "pre {border: 2px solid black; padding: 1px; background-color: #e0e0e0;}"
         html += "</style>"
         html += "</head><body>" + chr(13)
         html += "<header><h1>Basic-256 Documentation</h1></header>" + chr(13)
         html += page
         if intable then html+= "</table>"
         if listsig <> "" then html+= "</li></ul>"
         html +=  chr(13) + chr(10) + "<footer>" + chr(13)
         html += "<p><small>Except where otherwise noted, content on documentation is licensed under the following license: CC Attribution-Share Alike 3.0 Unported.  For on-line Documentation see <a href='http://doc.basic256.org'>http://doc.basic256.org</a>.</small></p>" + chr(13)
         html += "<p><small>Generated on "+ pad(year,4) + '-' + pad(month+1,2) + "-" + pad(day,2) +".</small></p>" + chr(13)
         html += "</footer></body></html>"
         
         if lang <> "" then
            outfilename = "help/"+lang+"_"+name+".html"
         else
            outfilename = "help/"+name+".html"
         endif
         if exists(outfilename) then kill outfilename
         open 1, outfilename
         write 1, html
         close 1
         print "Written "+ outfilename
      endif
      
      filename = dir()
      
   end while
next tlangs


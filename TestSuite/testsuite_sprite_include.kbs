# testsuite_sprite_include section for BASIC256

# Modification History
# date		programmer	description
# 20140204	j.m.reneau	added crazy if structures when if/then/else
#				moved to a statement and not a stand alone line (1010002)
# 20160510      j.m.reneau      use new form of the clg statetement to clear to a color
# 20160603      j.m.reneau      updated to use more sprite features for better testing

dim spritedx(5)
dim spritedy(5)
dim spritedr(5)
dim spriteds(5)

spritedim 5
# make the sprites from polys using the subroutine polysprite
penwidth 3
# two big right triangles
points =  {0,0,200,0,100,100}
penwidth 1
color black,red
spritepoly 0, {0,0,200,0,100,100}
color black,green
spritepoly 1, {0,0,200,0,100,100}
# two small right triangles
points =  {200,0,200,100,150,50}
color black, blue
spritepoly 2,{200,0,200,100,150,50}
color orange, grey
spritepoly 3,{50,0,50,100,0,50}
# one medium triangle
points =  {100,0,100,100,0,100}
penwidth 2
color black, cyan
spritepoly 4, {100,0,100,100,0,100}

# draw a black and white pattern on the screen for under the sprites
clg purple
color white
penwidth 3
for t = 0 to graphwidth step 10
   line 0,0,t,graphheight
next t
for t = 0 to graphheight step 10
   line 0,0,graphwidth,t
next t
refresh

# calculate the md5 hash of the screen
originalscreen$ = md5(getslice(0,0,graphwidth, graphheight))

for t = 0 to 4
   spriteshow t
   spritedx[t] = rand*5-.25
   spritedy[t] = rand*5-.25
   spritedr[t] = rand*pi*.1+-pi*.05
   spriteds[t] = rand *.3 - .15
   spriteplace t, rand*graphwidth, rand*graphheight, 1, spritedr[t]
next t

# move the sprites
for n = 1 to 100
   for t = 0 to 4
      x = spritex(t) + spritedx[t]
      if x > graphwidth then x = 0
      if x < 0 then x = graphwidth
      y = spritey(t) + spritedy[t]
      if y > graphwidth then y = 0
      if y < 0 then y = graphwidth
      r = spriter(t) + spritedr[t]
      s = sprites(t) + spriteds[t]
      if s > 1.5 then s = .5
      if s < .5 then s = 1.5
      spriteplace t,x,y,s,r
      refresh
   next t
next n
newscreen$ = md5(getslice(0,0,graphwidth, graphheight))
call sne("Screen different with sprites",originalscreen$,newscreen$)

for t = 0 to 4
   spritehide t
next t

refresh
# calculate the md5 hash of the screen
newscreen$ = md5(getslice(0,0,graphwidth, graphheight))

call s("Screen same after sprites",originalscreen$,newscreen$)

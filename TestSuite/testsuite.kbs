# testsuite for BASIC256

# This program will test most of the basic256 language compiler and interperter

# Modification History
# date		programmer	description
# 20121103	j.m.reneau	added strings, file io, '' strings
# 20121122	j.m.reneau	added freefile, freedb, freedbset, multiple db connections,
#				and multiple db sets open on a single connection
# 20121125	j.m.reneau	added dbnull and logic to test dbstring,
#				dbint, dbfloat, and dbnull with column names and numbers
# 20130102	j.m.reneau	added color with pen and fill and penwidth
# 20130126	j.m.reneau	added alert/confirm, sprites, imgsave, and imgload
# 20130205	j.m.reneau	added radix conversion test
# 20130208	j.m.reneau	removed DECIMAL statement and added SCI notation
# 20130403	j.m.reneau	added mouse test
# 20130610	j.m.reneau	added jump around subroutines - program will not run before 0.9.9.60
# 20130610	j.m.reneau	changed error trap test to trap 9999 (number less than 0 now untrappable)
# 20130903	j.m.reneau	added tests for exit (do|if|for|while) and continue (do|for|while)
# 20130906	j.m.reneau	arranged tests so that interactive tests were first for speed
#				added tests for floating point to integer compare (epsilon)
# 20130918	j.m.reneau	moved functions to seperate file and included them
# 20131125	j.m.reneau	added try/catch error trapping
# 20140103	j.m.reneau	moved to own folder and split file and database
#				out to own include so that they can be run independently
# 20140203	j.m.reneau	added testsuite_if_include to test new if/then/else
#				and begin case/case/end case
# 20140204	j.m.reneau	updated to 1.1.0.2
# 20140416	j.m.reneau	updated to 1.1.1.3 and added WAV statements
# 20140529	j.m.reneau	added testsuite_complete_include to report on missing statements
#				added dir include
#				added printer include
#				added time include
# 20140530	j.m.reneau	added network include
# 20141025	j.m.reneau	added serial include
# 20151114	j.m.reneau	added types include
# 20151127	j.m.reneau	moved requirement to 1.99.99.2
# 20151204	j.m.reneau	added neq preverence for VNA errors 1.99.99.6

include "testsuite_common_include.kbs"

###################################################
call section("Runtime Version")
###################################################
call versiontest(1999906)
function versiontestgood(needed)
   return version >= needed
end function
subroutine versiontest(needed)
   if not versiontestgood(needed) then
      print "this program requires version " + (needed\1000000) + "." + (needed\10000%100) + "." + (needed\100%100) + "." + (needed%100) + " or better"
      end
   end if
end subroutine

###################################################
call section("Runtime Preferences")
###################################################
print "It is required for this suite to run that a few preferences be set in advance"
print "On the 'User' tab"
print "  'Runtime Handling of bad type conversion' must set to Warn"
print "  'Runtime Handling of variable not assigned' must set to Warn"
print "On the 'Printing' tab"
print "  'Printer' must set to PDF File Output"
print "  'PDF FileName' must be set to a name of a temporary file with the pdf extension"
print 
call s("Type Conversion Setting", getSetting("SYSTEM","Runtime/TypeConv"),"1")
call s("Type Conversion Setting", getSetting("SYSTEM","Runtime/VNA"),"1")
# make sure printer setting are correct
call s("Printer - PDF setting", getsetting("SYSTEM","Printer/Printer"), "-1")
call sne("Printer - PDF setting", getsetting("SYSTEM","Printer/PDFFile"), "")

# create arrays to use
dim c[10]
dim twod(10,10)

###################################################
###################################################
###################################################
## Iteractive tests follow
###################################################
###################################################
###################################################

editvisible 1
graphvisible 1
outputvisible 1

###################################################
call section("TestSuite Completeness Check")
###################################################
include "testsuite_complete_include.kbs"

###################################################
call section("1D Numeric Array")
###################################################
c = {9,8,7,6,5,4,3,2,1,0}
call n("c[1]=8 after immediate assign",c[1],8)
call n("c[8]=1 after immediate assign",c[8],1)
c[0] = c[0] + c[8] : call n("c[0] after c[0] = c[0] + c[8]", c[0], 10)
c[0] += c[7] : call n("c[0] after c[0] += c[7]", c[0], 12)
c[0] -= c[6] : call n("c[0] after c[0] -= c[6]", c[0], 9)
c[1] *= c[2] : call n("c[1] after c[1] *= c[2]", c[1], 56)
c[1] /= c[7] : call n("c[1] after c[1] /= c[7]", c[1], 28)
redim c(20)
call n("c[1]=28 after redim",c[1],28)
call n("c[9]=0 after redim",c[9],0)
input "Input the number -3.14 > ", c[2]
call n("c[2]=-3.14 after rinput",c[2],-3.14)
input "Input the string 'crap' > ", c[2]
call n("c[2]=0 after input crap",c[2],0)

###################################################
call section("2D Numeric Array")
###################################################
for t = 0 to twod[?,]-1
   for u = 0 to twod[,?]-1
      twod[t,u] = t*100+u
   next u
next t
call n("twod[5,7]=507 after assign",twod[5,7],507)
twod[5,7]+=7
call n("twod[5,7] after twod[5,7]+=7",twod[5,7],514)
twod[5,7]-=7
call n("twod[5,7] after twod[5,7]-=7",twod[5,7],507)
twod[5,7]*=7
call n("twod[5,7] after twod[5,7]*=7",twod[5,7],3549)
twod[5,7]/=7
call n("twod[5,7] after twod[5,7]/=7",twod[5,7],507)
twod[5,7]++
call n("twod[5,7] after twod[5,7]++",twod[5,7],508)
twod[5,7]--
call n("twod[5,7] after twod[5,7]--",twod[5,7],507)
for t = 0 to twod[?,]-1
   for u = 0 to twod[,?]-1
      call n("twod["+t+","+u+"] as originally assigned",twod[t,u],t*100+u)
      twod[t,u] = t*100+u
   next u
next t
input "Input the number -3.14 > ", twod[2,1]
call n("twod[2,1]=-3.14 after rinput",twod[2,1],-3.14)
input "Input the string 'crap' > ", twod[3,2]
call n("twod[3,2]=0 after input crap",twod[3,2],0)

###################################################
call section("1D/2D String Array")
###################################################
c$ = {"A","B","C","D","E","F"}	#autodim
call s("c$[0]=A",c$[0],"A")
call s("c$[1]=B",c$[1],"B")
call s("c$[2]=C",c$[2],"C")
call s("c$[3]=D",c$[3],"D")
call s("c$[4]=E",c$[4],"E")
call s("c$[5]=F",c$[5],"F")
#
input "input string 'able' >", c$[5]
for x = 1 to length(c$[5])
print x + '"' + mid(c$[5],x,1) + '"' + " " + asc(mid(c$[5],x,1))
next x
call s("c$[5]='able'",c$[5],"able")
#
redim c$(5,2)
call s("c$[0,0]=A",c$[0,0],"A")
call s("c$[0,1]=B",c$[0,1],"B")
call s("c$[1,0]=C",c$[1,0],"C")
call s("c$[1,1]=D",c$[1,1],"D")
call s("c$[2,0]=E",c$[2,0],"E")
call s("c$[2,1]=able",c$[2,1],"able")
call s("c$[3,0]=''",c$[3,0],"")
call s("c$[3,1]=''",c$[3,1],"")

# switch
t$ = c$[0,1]
c$[0,1]=c$[0,0]
c$[0,0] = t$
call s("c$[0,0]=B",c$[0,0],"B")
call s("c$[0,1]=A",c$[0,1],"A")
#
input "input string 'alpha' > ", c$[3,1]
call s("c$[3,1]='alpha'",c$[3,1],"alpha")

###################################################
call section("Input, Key, and Prompt")
###################################################
a$ = "foo"
input "input the string 'abcd' ?", a$
call s("input prompt $",a$,"abcd")
print "input the string 'able' ?";
input a$
call s("input $",a$,"able")
input "Press enter?", a$
call s("input enter $",a$,"")
a = 99
input "input the number 99.99 ?", a
call n("input prompt #",a,99.99)
print "input the number -1.234 ?";
input a
call s("input #",a,-1.234)
input "input the string 'abcd' ?", a
call n("input prompt bad #",a,0)
input "Press enter?", a
call s("input enter #",a,0)

## key
if ostype() <> 3 then
   print "Press the space bar"
   # debounce
   do
      a = key
   until a = 0
   # get key
   do
      a = key
   until a <> 0
   call n("key space",a,32)
   print "Press the shift key."
   # debounce
   do
      a = key
   until a = 0
   # get key
   do
      a = key
   until a <> 0
   call n("key shift",a,16777248)
end if

a$=prompt("Click OK to accept the default","abcd")
call s("prompt dialog default",a$,"abcd")
a$=prompt("Change the value and click cancel","abcd")
call s("prompt dialog cancel default",a$,"abcd")
a$=prompt("Change the value to 'able' and click OK")
call s("prompt dialog",a$,"able")

section_graphics:
###################################################
call section("Basic Graphics")
###################################################
include "testsuite_graphics_include.kbs"

section_sound:
###################################################
call section("TTS and Sound")
###################################################
include "testsuite_sound_include.kbs"

section_wav:
###################################################
call section("WAVPLAY...")
###################################################
include "testsuite_wav_include.kbs"

###################################################
call section("IMGSave, IMGLoad, Kill and Exists")
###################################################
clg
penwidth 1
for t = 1 to 20
   color rgb(rand*256,rand*256,rand*256,rand*256)
   line rand*graphwidth, rand*graphheight, 10*rand, 10*rand
next t
refresh
imgsave "testimgsave.png"
pause .5
clg
refresh
pause .5
imgload graphwidth/2,graphheight /2,"testimgsave.png"
call q("imgload - did the image wink out?")
clg
for t = 0 to 2* pi step .1
   imgload graphwidth/2,graphheight /2,t/2,t,"testimgsave.png"
   refresh
next t
call q("imgload - did the image spin out?")
kill "testimgsave.png"
call n("delete temp imgsave image",exists("testimgsave.png"),false)

###################################################
call section("Poly and Stamp")
###################################################
clg
penwidth 5
color red, black
poly {100,100,30,200,170,200}
refresh
call q("poly black triangle red border?")
clg
for t = 0 to 2 * pi step .1
   stamp 150,150,t / (2*pi),t,{0,0,-70,100,70,100}
   refresh
next t
call q("stamp growing and rotating black triangle red border?")

section_mouse:
###################################################
call section("Mouse Functionality")
###################################################
include "testsuite_mouse_include.kbs"

section_time:
###################################################
call section("Date, Time, Pause, and Durations")
###################################################
include "testsuite_time_include.kbs"

section_printer:
###################################################
call section("Printing - To PDF")
###################################################
include "testsuite_printer_include.kbs"

section_network:
###################################################
call section("Networking")
###################################################
include "testsuite_network_include.kbs"

section_serial:
###################################################
call section("Serial Port")
###################################################
include "testsuite_serialio_include.kbs"
















###################################################
###################################################
###################################################
## Unattended tests follow
###################################################
###################################################
###################################################

section_string:
###################################################
call section("String Assignment/Operations/Functions")
###################################################
include "testsuite_string_include.kbs"

section_radix:
###################################################
call section("RADIX Conversion")
###################################################
include "testsuite_radix_include.kbs"

###################################################
call section("Functions and Subroutines")
###################################################
function funone(a, ref(b), c$, ref(d$))
   # old way of returning (prev to 0.9.9.21)
   a *= 2
   funone = a + b
   c$ = funtwo$(ref(b), ref(d$))
end function

function funtwo$(ref(r), ref(s$))
   r *=3
   s$ += s$
   return "squiggy"
end function

subroutine subone(a, b$)
   # set globals
   globala += a
   globalb$ += b$
end subroutine

global globala, globalb$
globala = 99
globalb$ = "globalb"
call subone(1,"foo")
call n("globala=100 after sub",globala,100)
call s("globalb$='globalbfoo' after sub",globalb$,"globalbfoo")
a = 9
b$ = "hi"
c = funone(7, ref(a), "junk", ref(b$))
call n("return from funone",c,23)
call n("a=27 return from funone",a,27)
call s("b$='hihi' return from funone",b$,"hihi")

section_error:
###################################################
call section("Error Trapping - OnError and Try/Catch")
###################################################
include "testsuite_error_include.kbs"

section_math:
###################################################
call section("Integer/Float/Math")
###################################################
include "testsuite_math_include.kbs"

section_fileio:
###################################################
call section("File I/O")
###################################################
include "testsuite_fileio_include.kbs"

section_database:
###################################################
call section("Database")
###################################################
include "testsuite_database_include.kbs"

section_if:
###################################################
call section("If")
###################################################
include "testsuite_if_include.kbs"

section_remark:
###################################################
call section("remark")
###################################################
include "testsuite_remark_include.kbs"

###################################################
call section("Test Random and fastgraphics")
###################################################
include "testsuite_random_include.kbs"

section_loop:
###################################################
call section("Loops with Exit and Continue")
###################################################
include "testsuite_loop_include.kbs"

section_sprites:
###################################################
call section("Sprites")
###################################################
include "testsuite_sprite_include.kbs"

section_dir:
###################################################
call section("Directory and File-System Checks")
###################################################
include "testsuite_dir_include.kbs"

section_types:
###################################################
call section("Variable and Stack Types Tests")
###################################################
include "testsuite_types_include.kbs"





###################################################
###################################################
###################################################
print "PASSED ALL TESTS."
alert "All tests passed"
###################################################
###################################################
###################################################
end



